pipeline {
  // Agent as Docker Container
  agent {
    docker {
      image 'kalpeshmohanta/docker-node-sonar_scanner:v9'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }



  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/kalpeshmohanta/Devops_Project_2-Mern_3_Tier_App.git'
      }
    }



    stage('Static Code Analysis SONARQUBE') {
      environment {
        SONAR_URL = "http://3.111.29.14:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd mern-docker-compose && sonar-scanner -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }



    stage('Build and Push Docker Frontend Image') {
      environment {
        DOCKER_IMAGE = "kalpeshmohanta/mern-docker-compose-frontend:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "mern-docker-compose/frontend/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd mern-docker-compose/frontend && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }



    stage('Build and Push Docker Backend Image') {
      environment {
        DOCKER_IMAGE = "kalpeshmohanta/mern-docker-compose-backend:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "mern-docker-compose/backend/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd mern-docker-compose/backend && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    

  }
}